(defun runnable (list &optional (tree nil))
  (if (not (null list))
      (uva122 (rest list) (traverse-tree tree (first list)))
      (depth-first tree))
  ) 

(defun traverse-tree (tree node)
  (cond ((and (eq (second node) 'L) (null (third node)))
         (list (first tree) (list (first node) nil nil ) nil)
         )
        ((and (eq (second node) 'R) (null (third node)))
         (list (first tree) (second tree) (list (first node) nil nil ))
         )
        ((eq (second node) 'L)
         (list (first tree) 
               (traverse-tree (second tree) (cons (first node) (rest (rest node))) ) 
               (third tree))
         )
        ((eq (second node) 'R)
         (list (first tree) 
               (second tree) 
               (traverse-tree (third tree) (cons (first node) (rest (rest node))))
               )
         )
        ((eq (second node) 'n)
         (list (first node) (second tree) (third tree))
         )
      ))      


(defparameter *stree*
  '((5 n) (4 L) (8 R) (11 L L) (13 R L) (14 R R) (7 L L L) (2 L L R) (1 R R R))
  )

(defun depth-first (tree)
  (cond 
   ((null tree) nil)
   ((atom tree)(list tree))
   (t (loop for a in tree
          appending (depth-first a)))))

(defun level-order (tree)
  (cond ((or (not (atom (second tree))) (not (atom (third tree))))
         (append (list (first tree)) (level-order (second tree))(level-order(third tree)))
         )
        (t 
         (list (first tree))
         )
        ))




;;; TESTS

(defmatch run-a-test ((?n - ?call => ?result))
  (unless (equal #?result (eval #?call))
    (pprint (match>> '(failed test. ?n -- ?call)))))

(defun tester (tests)
  (mapcar #'run-a-test tests)
  'test-completed)

(defparameter tests
  
  ;;;TESTING THE EXAMPLE SCENARIO
  
  '(
    (test1 - (runnable '((5 n) (1 L) (2 R))) 
           => (5 1 2))
    (test2 - (uva122 '((3 n) (4 L) (5 L L) (6 L L L))) 
           => (3 4 5 6))
    (test3 - (runnable '((3 n) (4 R) (5 R R) (6 R R R))) 
           => (3 4 5 6))
    (test4 - (runnable *stree*) 
           => (5 4 11 7 2 8 13 14 1))
    ))